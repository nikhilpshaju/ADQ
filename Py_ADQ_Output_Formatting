#Output Formatting

import re
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill, Border, Side
from openpyxl.utils import get_column_letter

file_path = "./builtin/Outlinkbroken.xlsx"
wb = load_workbook(file_path)

# Only processing sheets starting with "Output - Rule"
sheets_to_process = [s for s in wb.sheetnames if s.startswith("Output - Rule")]

header_pattern = re.compile(r"in\s+(.+)\s+sheet", re.IGNORECASE)

# Defining formatting styles
header_fill = PatternFill(start_color="00008B", end_color="00008B", fill_type="solid")  
header_font = Font(bold=False, color="FFFFFF")  
pattern_fill = PatternFill(start_color="ECECEC", end_color="ECECEC", fill_type="solid")  
pattern_font = Font(bold=True, color="000000")  

thin_border = Border(
    left=Side(style="thin"),
    right=Side(style="thin"),
    top=Side(style="thin"),
    bottom=Side(style="thin")
)

for sheet_name in sheets_to_process:
    ws = wb[sheet_name]
    print(f"Processing sheet: {ws.title}")

    current_target_sheet = None
    link_col_index = None
    header_type = None
    col_to_delete = None  
    header_row_idx = None

    for row_idx, row in enumerate(ws.iter_rows(min_row=1, max_row=ws.max_row), start=1):
        for cell in row:
            if cell.value and isinstance(cell.value, str):
                match = header_pattern.search(cell.value)
                if match:
                    current_target_sheet = match.group(1).strip()
                    link_col_index = None
                    header_type = None
                    col_to_delete = None
                    print(f"Found table for sheet '{current_target_sheet}' at row {row_idx}")

                    # Apply formatting 
                    for pattern_cell in ws[row_idx][1:]:
                        pattern_cell.fill = pattern_fill
                        pattern_cell.font = pattern_font
                    break

        if current_target_sheet and link_col_index is None:
            header_values = [str(cell.value).strip().lower() if cell.value else "" for cell in row]

            if "row number" in header_values:
                link_col_index = header_values.index("row number")
                header_type = "row number"
                header_row_idx = row_idx
                col_to_delete = link_col_index + 1
                print(f"'RowNumber' column found at index {col_to_delete} in row {row_idx}")

            elif "column number" in header_values:
                link_col_index = header_values.index("column number")
                header_type = "column number"
                col_to_delete = link_col_index + 1
                header_row_idx = row_idx
                print(f"'ColumnNumber' column found at index {col_to_delete} in row {row_idx}")

            elif "cell number" in header_values:
                link_col_index = header_values.index("cell number")
                header_type = "cell number"
                col_to_delete = link_col_index + 1
                header_row_idx = row_idx
                print(f"'CellNumber' column found at index {col_to_delete} in row {row_idx}")

            # Apply header formatting (from column B )
            if header_row_idx:
                for header_cell in ws[header_row_idx][1:]:
                    header_cell.fill = header_fill
                    header_cell.font = header_font
                    header_cell.border = thin_border


        elif current_target_sheet and link_col_index is not None:
            sr_no_cell = row[1]  
            link_value = row[link_col_index].value  

            if sr_no_cell.value and link_value:
                try:
                    safe_sheet_name = current_target_sheet.replace("'", "''")
                    safe_sheet_name = f"'{safe_sheet_name}'" if any(ch in current_target_sheet for ch in [" ", "-", "."]) else safe_sheet_name

                    if header_type == "row number":
                        target_number = int(link_value)
                        target_cell = f"{safe_sheet_name}!A{target_number}:Z{target_number}"

                    elif header_type == "column number":
                        target_number = int(link_value)
                        col_letter = get_column_letter(target_number)
                        target_cell = f"{safe_sheet_name}!{col_letter}:{col_letter}"

                    elif header_type == "cell number":
                        cell_ref = str(link_value).upper().strip()
                        target_cell = f"{safe_sheet_name}!{cell_ref}"

                    else:
                        continue

                    sr_no_cell.hyperlink = f"#{target_cell}"
                    sr_no_cell.font = Font(color="0000FF", underline="single")

                    print(f"Linked '{sr_no_cell.value}' â†’ {target_cell}")

                except ValueError:
                    pass
            # To apply borders from column B 
            for c in row[1:]:  # Skips column A
                c.border = thin_border
    for col in ws.columns:
        max_length = 0
        col_letter = get_column_letter(col[0].column)

        for cell in col:
            if cell.value:
                try:
                    length = len(str(cell.value))
                    if length > max_length:
                        max_length = length
                except:
                    pass

        adjusted_width = (max_length )  # padding
        ws.column_dimensions[col_letter].width = adjusted_width
        ws.column_dimensions["A"].width = 2
        ws.column_dimensions["B"].width = 6

           
    if col_to_delete:
        ws.delete_cols(col_to_delete)
        print(f"Deleted column {col_to_delete} from sheet '{sheet_name}'")

print("All hyperlinks created and columns deleted successfully.")
wb.save(file_path)
