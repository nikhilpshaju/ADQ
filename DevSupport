






{"id":"0x010026CD01070899A940B0B3E0B57A96757B001FC6B802568B9749A4FE0EA1916ECF1D","name":"Item"},"fields@odata.context":"https://graph.microsoft.com/v1.0/$metadata#sites('addhc.sharepoint.com%2C52300bcb-f327-4bdb-a01a-946f1528a89b%2C8d26ba3d-202f-433e-aca4-dd5e78678ba7')/lists('BoostConfig_Dev')/items('9')/fields/$entity","fields":{"@odata.etag":"\"e2c98274-c691-4d5f-af78-a0b2f5fcac57,2\"","Phase":"MS1","Parameter":"Threshold Amount - Other thresholds - CF Review form","Value":"20","Description":"Specifies the threshold value in millions to be used for validation in the CF Review form tab","id":"9","ContentType":"Item","Modified":"2025-10-08T13:24:32Z","Created":"2025-10-08T13:23:00Z","AuthorLookupId":"276","EditorLookupId":"276","_UIVersionString":"2.0","Attachments":false,"Edit":"","ItemChildCount":"0","FolderChildCount":"0","_ComplianceFlags":"","_ComplianceTag":"","_ComplianceTagWrittenTime":"","_ComplianceTagUserId":""}},{"@odata.etag":"\"72c6e49d-d0d4-4078-9902-63985226d390,3\"","createdDateTime":"2025-10-08T13:23:53Z","eTag":"\"72c6e49d-d0d4-4078-9902-63985226d390,3\"","id":"10","lastModifiedDateTime":"2025-10-08T13:24:37Z","webUrl":"https://addhc.sharepoint.com/sites/FinancialConsolidation-External/Lists/BoostConfig_Dev/10_.000","createdBy":{"user":{"email":"shmenon@adq.ae","id":"d5b42056-e9dd-420a-b43c-504e1106a28a","displayName":"Shruthi Menon"}},"lastModifiedBy":{"user":{"email":"shmenon@adq.ae","id":"d5b42056-e9dd-420a-b43c-504e1106a28a","displayName":"Shruthi Menon"}},"parentReference":{"id":"0f004d0d-bfd5-4db1-956c-6d9a7e023ba4","siteId":"addhc.sharepoint.com,52300bcb-f327-4bdb-a01a-946f1528a89b,8d26ba3d-202f-433e-aca4-dd5e78678ba7"}






























def list_all_sharepoint_lists(self):
        """
        Lists all SharePoint lists in the current site using Microsoft Graph API.
        Returns:
            list: List of dicts with list names and IDs.
        """
        self._ensure_valid_token()
        url = f"{self.graph_api_url}/sites/{self.site_id}/lists"
        print(f"Requesting all SharePoint lists from: {url}")
        response = requests.get(url, headers=self.headers)
        print(f"Response status: {response.status_code}")
        print(f"Response text: {response.text}")
        if response.status_code == 200:
            items = response.json().get("value", [])
            for item in items:
                print(f"List Name: {item.get('name')}, ID: {item.get('id')}")
            return items
        else:
            print(f"Failed to retrieve lists: {response.status_code} - {response.text}")
            return []


repo.list_all_sharepoint_lists()

    def get_sharepoint_list_items(self, list_name):
        self._ensure_valid_token()
        url = f"{self.graph_api_url}/sites/{self.site_id}/lists/{list_name}/items?expand=fields"
        print(f"Requesting SharePoint list items from: {url}")
        response = requests.get(url, headers=self.headers)
        print(f"Response status: {response.status_code}")
        print(f"Response text: {response.text}")
        if response.status_code == 200:
            items = response.json().get("value", [])
            print(f"Fetched {len(items)} items from the list.")
            return [item['fields'] for item in items]
        else:
            print(f"Failed to retrieve list items: {response.status_code} - {response.text}")
            return []


list_items = repo.get_sharepoint_list_items("Vyaya Support Agent List")
for item in list_items:
    print(item)




def move_file_within_onelake(workspace_id, lakehouse_id, source_relative_path, dest_relative_path, access_token):
    """
    Moves a file from one folder to another within Fabric OneLake Files using the DFS REST API.
    Args:
        workspace_id (str): The Fabric workspace ID.
        lakehouse_id (str): The Lakehouse ID.
        source_relative_path (str): The current path (including filename) under Files.
        dest_relative_path (str): The destination path (including filename) under Files.
        access_token (str): Azure AD access token for https://onelake.dfs.fabric.microsoft.com/.default
    Returns:
        bool: True if move succeeded, False otherwise.
    """
    base_url = f"https://onelake.dfs.fabric.microsoft.com/{workspace_id}/{lakehouse_id}/Files"
    source_url = f"{base_url}/{source_relative_path}"
    dest_url = f"{base_url}/{dest_relative_path}"
    headers = {
        'Authorization': f'Bearer {access_token}',
        'x-ms-version': '2023-11-03',
        'x-ms-rename-source': f"/{workspace_id}/{lakehouse_id}/Files/{source_relative_path}",
        'x-ms-rename-mode': 'move'
    }
    response = requests.put(dest_url, headers=headers)
    if response.status_code in (200, 201):
        print(f"Moved file from '{source_relative_path}' to '{dest_relative_path}' successfully.")
        return True
    else:
        print(f"Failed to move file: {response.status_code} - {response.text}")
        return False












# Import the environment utility
import mssparkutils

# Retrieve the file name passed from the pipeline
file_name = mssparkutils.env.getEnvironmentVariable("file_name")

# Display the file name
print(f"Processing file: {file_name}")



Folder contents:
An error occurred while retrieving token from XML response: AADSTS53003: Access has been blocked by Conditional Access policies. The access policy does not allow token issuance.

pip install filelock==3.11.0
pip install PyJWT>=2.6.0
pip install fsspec==2023.6.0
------------------------
endpoint = "https://adq-aifoundrytest.cognitiveservices.azure.com/"
model_name = "gpt-4.1"
deployment = "gpt-4.1"

subscription_key = "<your-api-key>"
api_version = "2024-12-01-preview"

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    api_key=subscription_key,
)

response = client.chat.completions.create(
    messages=[
        {
            "role": "system",
            "content": "You are a helpful assistant.",
        },
        {
            "role": "user",
            "content": "I am going to Paris, what should I see?",
        }
    ],
    max_completion_tokens=13107,
    temperature=1.0,
    top_p=1.0,
    frequency_penalty=0.0,
    presence_penalty=0.0,
    model=deployment
)

print(response.choices[0].message.content)
----------------

https://github.com/enterprises/ey/sso

"C:\Users\npshaju\AppData\Local\Programs\Python\Python313\python.exe" "C:\Users\npshaju\AppData\Local\Programs\Python\Python313\Install Certificates.command"

python -m pip install --upgrade certifi

pip install requests


pip install Office365-REST-Python-Client
pip install msal
pip install requests
pip install PyJWT
pip install pandas


File "C:\Users\npshaju\AppData\Local\Programs\Python\Python313\Lib\site-packages\requests\sessions.py", line 589, in request
    resp = self.send(prep, **send_kwargs)
  File "C:\Users\npshaju\AppData\Local\Programs\Python\Python313\Lib\site-packages\requests\sessions.py", line 703, in send
    r = adapter.send(request, **kwargs)
  File "C:\Users\npshaju\AppData\Local\Programs\Python\Python313\Lib\site-packages\requests\adapters.py", line 675, in send
    raise SSLError(e, request=request)
requests.exceptions.SSLError: HTTPSConnectionPool(host='login.microsoftonline.com', port=443): Max retries exceeded with url: /d05f986a-a71d-4fff-87fe-ecf3bf8e4c5a/v2.0/.well-known/openid-configuration (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1032)')))


---
python ./Install\ Certificates.command
pip install --upgrade certifi
response = requests.get(url, headers=self.headers, verify=False)
-------
int.client_context import ClientContext
ModuleNotFoundError: No module named 'office365'
PS C:\Users\npshaju> py -m pip install requests
WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))': /simple/requests/
WARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))': /simple/requests/
WARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))': /simple/requests/
WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))': /simple/requests/
WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))': /simple/requests/
Could not fetch URL https://pypi.org/simple/requests/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/requests/ (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))) - skipping
ERROR: Could not find a version that satisfies the requirement requests (from versions: none)
ERROR: No matching distribution found for requests
Could not fetch URL https://pypi.org/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:992)'))) - skipping
WARNING: There was an error checking the latest version of pip.
